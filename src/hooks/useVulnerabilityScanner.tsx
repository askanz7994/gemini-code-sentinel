
import { useState } from "react";
import { useToast } from "@/hooks/use-toast";
import { supabase } from "@/integrations/supabase/client";
import { Vulnerability, ScanState } from "@/types/vulnerability";
import { useCredits } from "@/hooks/useCredits";
import { useAuth } from "@/contexts/AuthContext";
import { useFileFetcher } from "@/hooks/useFileFetcher";
import { useScanRunner } from "@/hooks/useScanRunner";
import { useFileContentLoader } from "@/hooks/useFileContentLoader";

export const useVulnerabilityScanner = () => {
  const [state, setState] = useState<ScanState>({
    repoUrl: "",
    githubToken: "",
    isLoading: false,
    activeAction: null,
    results: null,
    repoFiles: null,
    repoInfo: null,
    fileContents: {},
    loadingFileContentForVulnId: null,
    isScanning: false,
  });

  const { toast } = useToast();
  const { credits, deductCredits } = useCredits();
  const { user } = useAuth();
  const { fetchFiles } = useFileFetcher();
  const { runScan } = useScanRunner();
  const { loadFileContent } = useFileContentLoader();

  const handleFetchFiles = async (e: React.FormEvent) => {
    e.preventDefault();
    await fetchFiles(state.repoUrl, state.githubToken, setState);
  };

  const handleStartScan = async () => {
    if (!user) {
      toast({ title: "Error", description: "You must be logged in to perform scans.", variant: "destructive" });
      return;
    }

    if (!state.repoFiles || state.repoFiles.length === 0) {
      toast({ title: "Error", description: "No files to scan.", variant: "destructive" });
      return;
    }
    if (!state.repoInfo) {
      toast({ title: "Error", description: "Repository information is missing. Please fetch files first.", variant: "destructive" });
      return;
    }

    // Check if user has enough credits
    if (credits < 1) {
      toast({ 
        title: "Insufficient Credits", 
        description: "You need 1 credit to perform a scan. Please purchase more credits.", 
        variant: "destructive" 
      });
      return;
    }

    // Deduct credits first
    const creditsDeducted = await deductCredits(1);
    if (!creditsDeducted) {
      return; // Credits deduction failed, error already shown
    }

    await runScan(state.repoUrl, state.repoInfo, state.repoFiles, state.githubToken, user, setState, toast);
  };

  const handleViewCode = async (vulnerability: Vulnerability) => {
    if (state.fileContents[vulnerability.file] || state.loadingFileContentForVulnId === vulnerability.id) {
      return;
    }
    if (!state.repoInfo) {
      toast({ title: "Error", description: "Repository information is missing.", variant: "destructive" });
      return;
    }

    await loadFileContent(vulnerability, state.repoInfo, state.githubToken, setState, toast);
  };

  const setRepoUrl = (url: string) => {
    setState(prev => ({ ...prev, repoUrl: url }));
  };

  const setGithubToken = (token: string) => {
    setState(prev => ({ ...prev, githubToken: token }));
  };

  return {
    state,
    handleFetchFiles,
    handleStartScan,
    handleViewCode,
    setRepoUrl,
    setGithubToken,
  };
};
